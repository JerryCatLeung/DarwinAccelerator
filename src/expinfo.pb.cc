// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expinfo.proto

#include "expinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DarwinAccelerator {
class ReqInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqInfo>
      _instance;
} _ReqInfo_default_instance_;
class RspInfo_ExpParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspInfo_ExpParam>
      _instance;
} _RspInfo_ExpParam_default_instance_;
class RspInfo_ExpLayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspInfo_ExpLayerInfo>
      _instance;
} _RspInfo_ExpLayerInfo_default_instance_;
class RspInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspInfo>
      _instance;
} _RspInfo_default_instance_;
}  // namespace DarwinAccelerator
namespace protobuf_expinfo_2eproto {
void InitDefaultsReqInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DarwinAccelerator::_ReqInfo_default_instance_;
    new (ptr) ::DarwinAccelerator::ReqInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DarwinAccelerator::ReqInfo::InitAsDefaultInstance();
}

void InitDefaultsReqInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqInfoImpl);
}

void InitDefaultsRspInfo_ExpParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DarwinAccelerator::_RspInfo_ExpParam_default_instance_;
    new (ptr) ::DarwinAccelerator::RspInfo_ExpParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DarwinAccelerator::RspInfo_ExpParam::InitAsDefaultInstance();
}

void InitDefaultsRspInfo_ExpParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRspInfo_ExpParamImpl);
}

void InitDefaultsRspInfo_ExpLayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpParam();
  {
    void* ptr = &::DarwinAccelerator::_RspInfo_ExpLayerInfo_default_instance_;
    new (ptr) ::DarwinAccelerator::RspInfo_ExpLayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DarwinAccelerator::RspInfo_ExpLayerInfo::InitAsDefaultInstance();
}

void InitDefaultsRspInfo_ExpLayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRspInfo_ExpLayerInfoImpl);
}

void InitDefaultsRspInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpLayerInfo();
  {
    void* ptr = &::DarwinAccelerator::_RspInfo_default_instance_;
    new (ptr) ::DarwinAccelerator::RspInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DarwinAccelerator::RspInfo::InitAsDefaultInstance();
}

void InitDefaultsRspInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRspInfoImpl);
}

}  // namespace protobuf_expinfo_2eproto
namespace DarwinAccelerator {

// ===================================================================

void ReqInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqInfo::kPosIdFieldNumber;
const int ReqInfo::kSguidFieldNumber;
const int ReqInfo::kLayersFieldNumber;
const int ReqInfo::kOrthFieldNumber;
const int ReqInfo::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqInfo::ReqInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_expinfo_2eproto::InitDefaultsReqInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DarwinAccelerator.ReqInfo)
}
ReqInfo::ReqInfo(const ReqInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sguid()) {
    sguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sguid_);
  }
  ::memcpy(&pos_id_, &from.pos_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&pos_id_)) + sizeof(shuffle_));
  // @@protoc_insertion_point(copy_constructor:DarwinAccelerator.ReqInfo)
}

void ReqInfo::SharedCtor() {
  _cached_size_ = 0;
  sguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layers_) -
      reinterpret_cast<char*>(&pos_id_)) + sizeof(layers_));
  orth_ = 1u;
  shuffle_ = 1u;
}

ReqInfo::~ReqInfo() {
  // @@protoc_insertion_point(destructor:DarwinAccelerator.ReqInfo)
  SharedDtor();
}

void ReqInfo::SharedDtor() {
  sguid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReqInfo& ReqInfo::default_instance() {
  ::protobuf_expinfo_2eproto::InitDefaultsReqInfo();
  return *internal_default_instance();
}

ReqInfo* ReqInfo::New(::google::protobuf::Arena* arena) const {
  ReqInfo* n = new ReqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DarwinAccelerator.ReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sguid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sguid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&pos_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layers_) -
        reinterpret_cast<char*>(&pos_id_)) + sizeof(layers_));
    orth_ = 1u;
    shuffle_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DarwinAccelerator.ReqInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pos_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sguid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sguid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 layers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_layers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 orth = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_orth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shuffle = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DarwinAccelerator.ReqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DarwinAccelerator.ReqInfo)
  return false;
#undef DO_
}

void ReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DarwinAccelerator.ReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pos_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos_id(), output);
  }

  // optional bytes sguid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sguid(), output);
  }

  // optional uint32 layers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layers(), output);
  }

  // optional uint32 orth = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->orth(), output);
  }

  // optional uint32 shuffle = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->shuffle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DarwinAccelerator.ReqInfo)
}

size_t ReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DarwinAccelerator.ReqInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes sguid = 2;
    if (has_sguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sguid());
    }

    // optional uint32 pos_id = 1;
    if (has_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_id());
    }

    // optional uint32 layers = 3;
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layers());
    }

    // optional uint32 orth = 4 [default = 1];
    if (has_orth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orth());
    }

    // optional uint32 shuffle = 5 [default = 1];
    if (has_shuffle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shuffle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReqInfo*>(&from));
}

void ReqInfo::MergeFrom(const ReqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DarwinAccelerator.ReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sguid();
      sguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sguid_);
    }
    if (cached_has_bits & 0x00000002u) {
      pos_id_ = from.pos_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      layers_ = from.layers_;
    }
    if (cached_has_bits & 0x00000008u) {
      orth_ = from.orth_;
    }
    if (cached_has_bits & 0x00000010u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqInfo::CopyFrom(const ReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DarwinAccelerator.ReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInfo::IsInitialized() const {
  return true;
}

void ReqInfo::Swap(ReqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqInfo::InternalSwap(ReqInfo* other) {
  using std::swap;
  sguid_.Swap(&other->sguid_);
  swap(pos_id_, other->pos_id_);
  swap(layers_, other->layers_);
  swap(orth_, other->orth_);
  swap(shuffle_, other->shuffle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ReqInfo::GetTypeName() const {
  return "DarwinAccelerator.ReqInfo";
}


// ===================================================================

void RspInfo_ExpParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspInfo_ExpParam::kSkeyFieldNumber;
const int RspInfo_ExpParam::kSvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspInfo_ExpParam::RspInfo_ExpParam()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DarwinAccelerator.RspInfo.ExpParam)
}
RspInfo_ExpParam::RspInfo_ExpParam(const RspInfo_ExpParam& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skey()) {
    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
  sval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sval()) {
    sval_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sval_);
  }
  // @@protoc_insertion_point(copy_constructor:DarwinAccelerator.RspInfo.ExpParam)
}

void RspInfo_ExpParam::SharedCtor() {
  _cached_size_ = 0;
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RspInfo_ExpParam::~RspInfo_ExpParam() {
  // @@protoc_insertion_point(destructor:DarwinAccelerator.RspInfo.ExpParam)
  SharedDtor();
}

void RspInfo_ExpParam::SharedDtor() {
  skey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RspInfo_ExpParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RspInfo_ExpParam& RspInfo_ExpParam::default_instance() {
  ::protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpParam();
  return *internal_default_instance();
}

RspInfo_ExpParam* RspInfo_ExpParam::New(::google::protobuf::Arena* arena) const {
  RspInfo_ExpParam* n = new RspInfo_ExpParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspInfo_ExpParam::Clear() {
// @@protoc_insertion_point(message_clear_start:DarwinAccelerator.RspInfo.ExpParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!skey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*skey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sval_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sval_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RspInfo_ExpParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DarwinAccelerator.RspInfo.ExpParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes skey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DarwinAccelerator.RspInfo.ExpParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DarwinAccelerator.RspInfo.ExpParam)
  return false;
#undef DO_
}

void RspInfo_ExpParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DarwinAccelerator.RspInfo.ExpParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes skey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->skey(), output);
  }

  // optional bytes sval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sval(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DarwinAccelerator.RspInfo.ExpParam)
}

size_t RspInfo_ExpParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DarwinAccelerator.RspInfo.ExpParam)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes skey = 1;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skey());
    }

    // optional bytes sval = 2;
    if (has_sval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspInfo_ExpParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RspInfo_ExpParam*>(&from));
}

void RspInfo_ExpParam::MergeFrom(const RspInfo_ExpParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DarwinAccelerator.RspInfo.ExpParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_skey();
      skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sval();
      sval_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sval_);
    }
  }
}

void RspInfo_ExpParam::CopyFrom(const RspInfo_ExpParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DarwinAccelerator.RspInfo.ExpParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspInfo_ExpParam::IsInitialized() const {
  return true;
}

void RspInfo_ExpParam::Swap(RspInfo_ExpParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspInfo_ExpParam::InternalSwap(RspInfo_ExpParam* other) {
  using std::swap;
  skey_.Swap(&other->skey_);
  sval_.Swap(&other->sval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RspInfo_ExpParam::GetTypeName() const {
  return "DarwinAccelerator.RspInfo.ExpParam";
}


// ===================================================================

void RspInfo_ExpLayerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspInfo_ExpLayerInfo::kExpLayerFieldNumber;
const int RspInfo_ExpLayerInfo::kExpIdFieldNumber;
const int RspInfo_ExpLayerInfo::kExpParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspInfo_ExpLayerInfo::RspInfo_ExpLayerInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpLayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DarwinAccelerator.RspInfo.ExpLayerInfo)
}
RspInfo_ExpLayerInfo::RspInfo_ExpLayerInfo(const RspInfo_ExpLayerInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exp_param_(from.exp_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exp_layer_, &from.exp_layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_id_) -
    reinterpret_cast<char*>(&exp_layer_)) + sizeof(exp_id_));
  // @@protoc_insertion_point(copy_constructor:DarwinAccelerator.RspInfo.ExpLayerInfo)
}

void RspInfo_ExpLayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&exp_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_id_) -
      reinterpret_cast<char*>(&exp_layer_)) + sizeof(exp_id_));
}

RspInfo_ExpLayerInfo::~RspInfo_ExpLayerInfo() {
  // @@protoc_insertion_point(destructor:DarwinAccelerator.RspInfo.ExpLayerInfo)
  SharedDtor();
}

void RspInfo_ExpLayerInfo::SharedDtor() {
}

void RspInfo_ExpLayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RspInfo_ExpLayerInfo& RspInfo_ExpLayerInfo::default_instance() {
  ::protobuf_expinfo_2eproto::InitDefaultsRspInfo_ExpLayerInfo();
  return *internal_default_instance();
}

RspInfo_ExpLayerInfo* RspInfo_ExpLayerInfo::New(::google::protobuf::Arena* arena) const {
  RspInfo_ExpLayerInfo* n = new RspInfo_ExpLayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspInfo_ExpLayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&exp_layer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_id_) -
        reinterpret_cast<char*>(&exp_layer_)) + sizeof(exp_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RspInfo_ExpLayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exp_layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_exp_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exp_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_exp_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DarwinAccelerator.RspInfo.ExpParam exp_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DarwinAccelerator.RspInfo.ExpLayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DarwinAccelerator.RspInfo.ExpLayerInfo)
  return false;
#undef DO_
}

void RspInfo_ExpLayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 exp_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp_layer(), output);
  }

  // optional uint32 exp_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp_id(), output);
  }

  // repeated .DarwinAccelerator.RspInfo.ExpParam exp_param = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exp_param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->exp_param(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DarwinAccelerator.RspInfo.ExpLayerInfo)
}

size_t RspInfo_ExpLayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .DarwinAccelerator.RspInfo.ExpParam exp_param = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->exp_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exp_param(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 exp_layer = 1;
    if (has_exp_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_layer());
    }

    // optional uint32 exp_id = 2 [default = 0];
    if (has_exp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspInfo_ExpLayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RspInfo_ExpLayerInfo*>(&from));
}

void RspInfo_ExpLayerInfo::MergeFrom(const RspInfo_ExpLayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exp_param_.MergeFrom(from.exp_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exp_layer_ = from.exp_layer_;
    }
    if (cached_has_bits & 0x00000002u) {
      exp_id_ = from.exp_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RspInfo_ExpLayerInfo::CopyFrom(const RspInfo_ExpLayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DarwinAccelerator.RspInfo.ExpLayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspInfo_ExpLayerInfo::IsInitialized() const {
  return true;
}

void RspInfo_ExpLayerInfo::Swap(RspInfo_ExpLayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspInfo_ExpLayerInfo::InternalSwap(RspInfo_ExpLayerInfo* other) {
  using std::swap;
  exp_param_.InternalSwap(&other->exp_param_);
  swap(exp_layer_, other->exp_layer_);
  swap(exp_id_, other->exp_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RspInfo_ExpLayerInfo::GetTypeName() const {
  return "DarwinAccelerator.RspInfo.ExpLayerInfo";
}


// ===================================================================

void RspInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspInfo::kExpInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspInfo::RspInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_expinfo_2eproto::InitDefaultsRspInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DarwinAccelerator.RspInfo)
}
RspInfo::RspInfo(const RspInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exp_info_(from.exp_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DarwinAccelerator.RspInfo)
}

void RspInfo::SharedCtor() {
  _cached_size_ = 0;
}

RspInfo::~RspInfo() {
  // @@protoc_insertion_point(destructor:DarwinAccelerator.RspInfo)
  SharedDtor();
}

void RspInfo::SharedDtor() {
}

void RspInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RspInfo& RspInfo::default_instance() {
  ::protobuf_expinfo_2eproto::InitDefaultsRspInfo();
  return *internal_default_instance();
}

RspInfo* RspInfo::New(::google::protobuf::Arena* arena) const {
  RspInfo* n = new RspInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DarwinAccelerator.RspInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RspInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DarwinAccelerator.RspInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DarwinAccelerator.RspInfo.ExpLayerInfo exp_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DarwinAccelerator.RspInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DarwinAccelerator.RspInfo)
  return false;
#undef DO_
}

void RspInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DarwinAccelerator.RspInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DarwinAccelerator.RspInfo.ExpLayerInfo exp_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exp_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->exp_info(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DarwinAccelerator.RspInfo)
}

size_t RspInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DarwinAccelerator.RspInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .DarwinAccelerator.RspInfo.ExpLayerInfo exp_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->exp_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exp_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RspInfo*>(&from));
}

void RspInfo::MergeFrom(const RspInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DarwinAccelerator.RspInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exp_info_.MergeFrom(from.exp_info_);
}

void RspInfo::CopyFrom(const RspInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DarwinAccelerator.RspInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspInfo::IsInitialized() const {
  return true;
}

void RspInfo::Swap(RspInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspInfo::InternalSwap(RspInfo* other) {
  using std::swap;
  exp_info_.InternalSwap(&other->exp_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RspInfo::GetTypeName() const {
  return "DarwinAccelerator.RspInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DarwinAccelerator

// @@protoc_insertion_point(global_scope)
